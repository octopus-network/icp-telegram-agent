type Account = record { owner : principal; subaccount : opt vec nat8 };
type Chain = record {
  fee_token : opt text;
  canister_id : text;
  chain_id : text;
  counterparties : opt vec text;
  chain_state : ChainState;
  chain_type : ChainType;
  contract_address : opt text;
};
type ChainState = variant { Active; Deactive };
type ChainType = variant { SettlementChain; ExecutionChain };
type ChangeFeeCollector = variant { SetTo : Account; Unset };
type Event = variant {
  finalized_gen_ticket : record {
    request : GenerateTicketReq;
    ticket_id : text;
  };
  updated_fee : record { fee : Factor };
  finalized_mint_token : record { block_index : nat64; ticket_id : text };
  added_token : record { token : Token; ledger_id : principal };
  init : InitArgs;
  upgrade : UpgradeArgs;
  added_chain : Chain;
  toggle_chain_state : ToggleState;
};
type Factor = variant {
  UpdateFeeTokenFactor : FeeTokenFactor;
  UpdateTargetChainFactor : TargetChainFactor;
};
type FeatureFlags = record { icrc2 : bool };
type FeeTokenFactor = record { fee_token : text; fee_token_factor : nat };
type GenerateTicketError = variant {
  InsufficientRedeemFee : record { provided : nat64; required : nat64 };
  SendTicketErr : text;
  TemporarilyUnavailable : text;
  InsufficientAllowance : record { allowance : nat64 };
  TransferFailure : text;
  UnsupportedAction : text;
  RedeemFeeNotSet;
  UnsupportedChainId : text;
  UnsupportedToken : text;
  InsufficientFunds : record { balance : nat64 };
};
type GenerateTicketOk = record { ticket_id : text };
type GenerateTicketReq = record {
  action : TxAction;
  token_id : text;
  from_subaccount : opt vec nat8;
  target_chain_id : text;
  amount : nat;
  receiver : text;
};
type GetEventsArg = record { start : nat64; length : nat64 };
type InitArgs = record {
  hub_principal : principal;
  chain_id : text;
  chain_state : ChainState;
};
type Log = record { log : text; offset : nat64 };
type Logs = record { logs : vec Log; all_logs_count : nat64 };
type MetadataValue = variant {
  Int : int;
  Nat : nat;
  Blob : vec nat8;
  Text : text;
};
type MintTokenStatus = variant {
  Finalized : record { block_index : nat64 };
  Unknown;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : GenerateTicketOk; Err : GenerateTicketError };
type Result_2 = variant { Ok; Err : GenerateTicketError };
type RouteArg = variant { Upgrade : opt UpgradeArgs; Init : InitArgs };
type TargetChainFactor = record {
  target_chain_id : text;
  target_chain_factor : nat;
};
type ToggleAction = variant { Deactivate; Activate };
type ToggleState = record { action : ToggleAction; chain_id : text };
type Token = record {
  decimals : nat8;
  token_id : text;
  metadata : vec record { text; text };
  icon : opt text;
  name : text;
  symbol : text;
};
type TokenResp = record {
  decimals : nat8;
  token_id : text;
  icon : opt text;
  rune_id : opt text;
  symbol : text;
};
type TxAction = variant { Burn; Redeem; Mint; Transfer };
type UpgradeArgs = record {
  hub_principal : opt principal;
  chain_id : opt text;
  chain_state : opt ChainState;
};
type UpgradeArgs_1 = record {
  token_symbol : opt text;
  transfer_fee : opt nat;
  metadata : opt vec record { text; MetadataValue };
  maximum_number_of_accounts : opt nat64;
  accounts_overflow_trim_quantity : opt nat64;
  change_fee_collector : opt ChangeFeeCollector;
  max_memo_length : opt nat16;
  token_name : opt text;
  feature_flags : opt FeatureFlags;
};
service : {
  collect_ledger_fee : (principal, opt nat, Account) -> (Result);
  generate_ticket : (GenerateTicketReq) -> (Result_1);
  get_chain_list : () -> (vec Chain) query;
  get_events : (GetEventsArg) -> (vec Event) query;
  get_fee_account : (opt principal) -> (vec nat8) query;
  get_log_records : (nat64, nat64) -> (Logs) query;
  get_redeem_fee : (text) -> (opt nat64) query;
  get_token_ledger : (text) -> (opt principal) query;
  get_token_list : () -> (vec TokenResp) query;
  mint_token_status : (text) -> (MintTokenStatus) query;
  remove_controller : (principal, principal) -> (Result);
  resend_tickets : () -> (Result_2);
  update_icrc_ledger : (principal, UpgradeArgs_1) -> (Result);
}